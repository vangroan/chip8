//! Assembler

use crate::{
    bytecode::{opcodes::*, *},
    constants::*,
    error::{AsmError, Chip8Error, Chip8Result},
};

use super::{
    lexer::Lexer,
    token_stream::TokenStream,
    tokens::{NumFormat, Number, TokenKind},
    Keyword, Token,
};

/// Chip-8 assembler.
pub struct Assembler<'a> {
    /// Token stream of assembly code.
    stream: TokenStream<'a>,
    /// Symbol tabel of labels mapping to their target addresses.
    ///
    /// The address is stored as the proper nnn format used in Chip-8.
    labels: Vec<(String, u16)>,
    /// Record of attempts to access a label that hasn't been defined yet.
    ///
    /// Includes the token (and span) that attempted the access, as well
    /// as the index into the bytecode buffer where the corresponding
    /// instruction was emitted.
    ///
    /// This is then later used to patch the bytecode after all labels
    /// are be defined.
    ///
    /// See [`Assembler::fix_labels()`]
    defer: Vec<LabelAccess>,
    /// Result buffer of generated bytecode.
    bytecode: Vec<u8>,
}

/// Access to a label that hasn't been defined yet.
struct LabelAccess {
    /// The token where the label was accessed.
    token: Token,
    /// Index into the generated bytecode where the placeholder
    /// instruction was emitted.
    offset: usize,
}

impl<'a> Assembler<'a> {
    pub fn new(lexer: Lexer<'a>) -> Self {
        Self {
            stream: TokenStream::new(lexer),
            labels: vec![],
            defer: vec![],
            bytecode: vec![],
        }
    }

    pub fn parse(mut self) -> Chip8Result<Vec<u8>> {
        loop {
            match self.stream.peek_kind() {
                Some(token_kind) => {
                    match token_kind {
                        TokenKind::Newline => {
                            /* Skip empty line */
                            self.stream.consume(TokenKind::Newline)?;
                            continue;
                        }
                        TokenKind::Dot => self.parse_label()?,
                        TokenKind::Number => self.parse_data_block()?,
                        TokenKind::Keyword(_) => self.parse_mnemonic()?,
                        TokenKind::Unknown => {
                            let token = self.stream.next_token().unwrap();
                            let message = format!("unknown token {:?}", token.kind);
                            return Err(self.error(token, message));
                        }
                        TokenKind::EOF => break,
                        _ => {
                            let token = self.stream.next_token().unwrap();
                            let message = format!("expected opcode, found {:?}", token.kind);
                            return Err(self.error(token, message));
                        }
                    }
                }
                None => break,
            }
        }

        let label_count = self.fix_labels()?;
        println!("fixed {label_count} deferred labels");

        Ok(self.bytecode)
    }

    #[inline(never)]
    #[cold]
    fn error(&self, token: Token, message: impl ToString) -> Chip8Error {
        AsmError::new(self.stream.source_code(), token, message).into()
    }

    fn next_offset(&self) -> usize {
        self.bytecode.len()
    }

    fn push_label(&mut self, name: &Token) {
        debug_assert_eq!(
            name.kind,
            TokenKind::Ident,
            "only identifiers may be used as label names"
        );

        // Target address that is being labeled.
        let address = (MEM_START + self.next_offset()) as u16;
        let fragment = name.span.fragment(self.stream.source_code()).to_owned();

        self.labels.push((fragment, address));
    }

    fn lookup_label(&self, name: &str) -> Option<u16> {
        self.labels
            .iter()
            .find(|(n, _)| n == name)
            .map(|(_, offset)| offset)
            .cloned()
    }

    /// Will store a deferred label access if the label cannot be found.
    ///
    /// IMPORTANT: The caller must emit a bytecode instruction immediately
    ///     after attempting to resolve a label.
    fn resolve_label(&mut self, label: Token) -> Option<u16> {
        debug_assert_eq!(
            label.kind,
            TokenKind::Label,
            "label must be resolved with a label token"
        );

        let name = self.stream.span_fragment(&label.span);
        let maybe_nnn = self.lookup_label(name);

        // If the label is accessed before it's defined, then
        // the caller is expected to emit a placeholder instruction.
        //
        // The access to the label is stored with enough bookkeeping
        // to replace the instruction later.
        if maybe_nnn.is_none() {
            let next_offset = self.next_offset();
            self.defer.push(LabelAccess {
                token: label,
                offset: next_offset,
            });
        }

        maybe_nnn
    }

    fn emit2(&mut self, instr: [u8; 2]) {
        println!("emit2: {:02X} {:02X}", instr[0], instr[1]);
        self.bytecode.push(instr[0]);
        self.bytecode.push(instr[1]);
    }

    fn emit(&mut self, instr: u8) {
        println!("emit: {:02X}", instr);
        self.bytecode.push(instr);
    }

    fn dump_bytecode(&self) {
        // Instructions are always 2 bytes.
        assert!(self.bytecode.len() % 2 == 0);

        for (i, instr) in self.bytecode.chunks(2).enumerate() {
            let offset = i * 2;
            let a = instr[0];
            let b = instr[1];
            println!("0x{offset:04X} {a:02X}{b:02X}");
        }
    }
}

/// Label definition pass.
impl<'a> Assembler<'a> {
    /// Pass over the generated bytecode to replace placeholder
    /// instructions with the actual address of the defined label.
    fn fix_labels(&mut self) -> Chip8Result<usize> {
        let mut count = 0;

        // Dump labels
        println!("labels:");
        for (name, nnn) in &self.labels {
            println!("    .{name}: 0x{nnn:X}");
        }

        // Take accesses waiting for label to be defined.
        let deferred_access: Vec<_> = self.defer.drain(..).collect();

        for access in deferred_access {
            debug_assert_eq!(access.token.kind, TokenKind::Label);

            let name = self.stream.span_fragment(&access.token.span);
            let nnn = self.lookup_label(name).ok_or_else(|| {
                let message = format!("label '{name}' is undefined");
                self.error(access.token, message)
            })?;

            self.patch_nnn(access.offset, nnn)?;

            count += 1;
        }

        Ok(count)
    }

    /// Replace the placeholder nnn in the instruction at the given index.
    fn patch_nnn(&mut self, index: usize, nnn: u16) -> Chip8Result<()> {
        println!("replacing instruction with 0x{nnn:X}");
        assert!(
            index + 1 < self.bytecode.len(),
            "out-of-range attempt to patch bytecode"
        );

        let a = self.bytecode[index];
        let _ = self.bytecode[index + 1]; // 00

        self.bytecode[index] = (a & 0b11110000) | (nnn >> 8) as u8;
        self.bytecode[index + 1] = (nnn & 0b11111111) as u8;

        Ok(())
    }
}

impl<'a> Assembler<'a> {
    const STATEMENT_END: &[TokenKind] = &[TokenKind::EOF, TokenKind::Newline];

    /// Consume an end-of-statement.
    fn consume_eos(&mut self) -> Chip8Result<()> {
        match self.stream.peek_kind() {
            Some(next_kind) => {
                for expected_kind in Self::STATEMENT_END.iter().cloned() {
                    if next_kind == expected_kind {
                        // Found
                        self.stream.next_token();
                        return Ok(());
                    } else {
                        continue;
                    }
                }
            }
            None => {
                // Lexer iterator is exhausted, meaning we're beyond EOF.
                return Ok(());
            }
        }

        let kind_names = Self::STATEMENT_END
            .iter()
            .map(|kind| format!("{:?}", kind))
            .collect::<Vec<_>>();
        panic!(
            "expected one of: {}; found {:?}",
            kind_names.join(", "),
            self.stream.peek_kind()
        )
    }

    fn parse_args(&mut self) -> Chip8Result<[Token; 2]> {
        let dst = self.stream.next_token().ok_or_else(|| Chip8Error::EOF)?;
        let _comma = self.stream.consume(TokenKind::Comma)?;
        let mut src = self.stream.next_token().ok_or_else(|| Chip8Error::EOF)?;

        // Labels start with a dot
        if src.kind == TokenKind::Dot {
            src = self.stream.consume(TokenKind::Ident)?;

            // Transform the identifier into a label for ease of use.
            // Technically the grammar is now no longer context-free.
            src.kind = TokenKind::Label;
        }

        Ok([dst, src])
    }

    fn parse_vregister(&self, token: Token) -> Chip8Result<u8> {
        if let TokenKind::Keyword(keyword) = token.kind {
            if let Some(vregister) = keyword.as_vregister() {
                return Ok(vregister);
            }
        }
        let message = format!("expected one of the V0-VF registers");
        Err(self.error(token, message))
    }

    fn parse_number(&self, token: Token) -> Chip8Result<Number> {
        use NumFormat as NF;

        let fragment = self.stream.span_fragment(&token.span);
        println!("fragment {fragment}");

        // All digits are ASCII, so we can cast the UTF-8 string to bytes
        // and treat every byte as a character.
        let bytes = fragment.as_bytes();

        let (format, parse_result) = if bytes[0] == b'0' {
            match bytes.get(1) {
                Some(b'b') => (NF::Bin, u16::from_str_radix(slice_number(fragment), 2)),
                Some(b'x') => (NF::Hex, u16::from_str_radix(slice_number(fragment), 16)),
                _ => (NF::Dec, u16::from_str_radix(fragment, 10)),
            }
        } else {
            (NF::Dec, u16::from_str_radix(fragment, 10))
        };

        let value = parse_result.map_err(|err| Chip8Error::NumberParse(err))?;

        Ok(Number { value, format })
    }

    fn parse_label(&mut self) -> Chip8Result<()> {
        debug_assert!(matches!(self.stream.peek_kind(), Some(TokenKind::Dot)));

        let _dot = self.stream.consume(TokenKind::Dot)?;
        let name = self.stream.consume(TokenKind::Ident)?;
        if name.kind != TokenKind::Ident {
            return Err(self.error(name, "expected label name"));
        }

        self.consume_eos()?;

        self.push_label(&name);

        Ok(())
    }

    /// Emit raw data into bytecode.
    fn parse_data_block(&mut self) -> Chip8Result<()> {
        let mut count = 0;

        loop {
            match self.stream.peek_kind() {
                Some(TokenKind::Number) => {
                    let token = self.stream.consume(TokenKind::Number)?;
                    let nn = self.parse_number(token)?;
                    if nn.value > u8::MAX as u16 {
                        panic!("only 8-bit literals are currently supported");
                    }
                    self.emit(nn.value as u8);
                    count += 1;
                }
                _ => break,
            }

            // Discard optional newline so we can continue consuming data
            // split accross multiple lines.
            let _newline = self.stream.consume(TokenKind::Newline);
        }

        println!("data count: {count}");
        assert!(count % 2 == 0, "data must be added in 2 bytes");

        Ok(())
    }

    fn parse_mnemonic(&mut self) -> Chip8Result<()> {
        debug_assert!(matches!(
            self.stream.peek_kind(),
            Some(TokenKind::Keyword(_))
        ));

        let name = self.stream.next_token().ok_or_else(|| Chip8Error::EOF)?;

        if let TokenKind::Keyword(keyword) = name.kind {
            match keyword {
                Keyword::Load => self.parse_load(name)?,
                Keyword::Random => self.parse_rand(name)?,
                _ => {
                    let fragment = self.stream.span_fragment(&name.span);
                    return Err(self.error(name, format!("unsupported opcode {:?}", fragment)));
                }
            }
        }

        Ok(())
    }

    /// Load
    ///
    /// - 6XNN (LD Vx,  byte)
    /// - ANNN (LD I,   addr)
    /// - Fx07 (LD Vx,  DT)
    /// - Fx0A (LD Vx,  K)
    /// - Fx15 (LD DT,  Vx)
    /// - Fx18 (LD ST,  Vx)
    /// - Fx29 (LD F,   Vx)
    /// - Fx33 (LD B,   Vx)
    /// - Fx55 (LD [I], Vx)
    /// - Fx65 (LD Vx,  [I])
    fn parse_load(&mut self, _name: Token) -> Chip8Result<()> {
        use Keyword as KW;
        use TokenKind as TK;

        // let dst = self.stream.next_token().ok_or_else(|| Chip8Error::EOF)?;
        let [dst, src] = self.parse_args()?;

        let signature = [dst.kind, src.kind];

        match signature {
            // (LD Vx, byte)
            //
            // Load byte literal into Vx register
            [TK::Keyword(kw), TK::Number] if is_vregister(kw) => {
                let vx = kw.as_vregister().unwrap_or_else(|| unreachable!());
                let nn = self.parse_number(src)?;
                self.emit2(encode_xnn(LD_VX_BYTE, vx, nn.as_u8()))
            }
            // ANNN (LD I, addr)
            //
            // Load memory address into index register.
            [TK::Keyword(KW::Index), TK::Number] => {
                let nnn = self.parse_number(src)?;
                self.emit2(encode_nnn(LD_NNN_BYTE, nnn.value));
            }
            // ANNN (LD I, label)
            //
            // Load memory address into index register.
            [TK::Keyword(KW::Index), TK::Label] => {
                // NOTE: If label is not defined yet, we default to 0x000
                let nnn = (self.resolve_label(src).unwrap_or_default() & 0xFFF) as u16;
                self.emit2(encode_nnn(LD_NNN_BYTE, nnn));
            }
            // Fx55 (LD [I], Vx)
            //
            // Load registers into memory block.
            [TK::Keyword(KW::Index), TK::Keyword(kw)] if is_vregister(kw) => {}
            _ => {
                let message = format!(
                    "unsupported arguments, found {:?}, {:?}",
                    dst.kind, src.kind
                );
                return Err(self.error(dst, message));
            }
        }

        self.consume_eos()?;

        // println!("{:?}", self.bytecode);
        self.dump_bytecode();

        // Err(self.error(name, "todo"))
        Ok(())
    }

    fn parse_rand(&mut self, _name: Token) -> Chip8Result<()> {
        let vx = self
            .stream
            .next_token()
            .ok_or_else(|| Chip8Error::EOF)
            .and_then(|t| self.parse_vregister(t))?;
        let _comma = self.stream.consume(TokenKind::Comma)?;
        let nn = self
            .stream
            .consume(TokenKind::Number)
            .and_then(|t| self.parse_number(t))?;

        self.emit2(encode_xnn(RND_X_BYTE, vx, nn.as_u8()));

        Ok(())
    }
}

fn is_vregister(keyword: Keyword) -> bool {
    use Keyword as K;
    matches!(
        keyword,
        K::V0
            | K::V1
            | K::V2
            | K::V3
            | K::V4
            | K::V5
            | K::V6
            | K::V7
            | K::V8
            | K::V9
            | K::VA
            | K::VB
            | K::VC
            | K::VD
            | K::VE
            | K::VF
    )
}

fn slice_number(fragment: &str) -> &str {
    let rest = &fragment[2..];
    println!("fragment {fragment} rest {rest}");
    if rest == "" {
        "0"
    } else {
        rest
    }
}
